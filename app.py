import streamlit as st
import ccxt
import pandas as pd
import altair as alt
import requests
import logging
import time

# --- C·∫•u h√¨nh Logging ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- CSS T√πy ch·ªânh ---
st.markdown("""
<style>
    .reportview-container .main .block-container {
        max-width: 1200px;
        padding-top: 2rem;
        padding-right: 2rem;
        padding-left: 2rem;
        padding-bottom: 2rem;
    }
    .full-width-chart .stPlotlyChart {
        width: 100% !important;
    }
    .st-emotion-cache-1cypcdb { /* Sidebar width on smaller screens */
        width: 250px;
    }
    @media (max-width: 768px) {
        .reportview-container .main .block-container {
            padding-top: 1rem;
            padding-right: 1rem;
            padding-left: 1rem;
        }
        .st-emotion-cache-1cypcdb { /* Adjust sidebar width for mobile */
            width: 100% !important;
        }
    }
    .main-header {
        font-size: 2.5em;
        font-weight: bold;
        color: #4CAF50;
        text-align: center;
        margin-bottom: 1.5em;
    }
    .stNotification {
        font-size: 0.9em;
    }
</style>
""", unsafe_allow_html=True)

# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="Giao D·ªãch USDT - Ph√¢n T√≠ch N·∫øn Doji",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- C√°c h√†m ti·ªán √≠ch ---
@st.cache_data(ttl=3600) # Cache k·∫øt qu·∫£ trong 1 gi·ªù
def get_exchange(exchange_id):
    """Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng s√†n giao d·ªãch t·ª´ ccxt."""
    try:
        exchange_class = getattr(ccxt, exchange_id)
        exchange = exchange_class({
            'timeout': 30000,
            'enableRateLimit': True,
        })
        return exchange
    except Exception as e:
        logging.error(f"L·ªói khi kh·ªüi t·∫°o s√†n {exchange_id}: {e}")
        return None

@st.cache_data(ttl=600) # Cache k·∫øt qu·∫£ trong 10 ph√∫t
def fetch_all_usdt_pairs(exchange_id):
    """
    Truy xu·∫•t t·∫•t c·∫£ c√°c c·∫∑p giao d·ªãch USDT t·ª´ m·ªôt s√†n giao d·ªãch.
    S·ª≠ d·ª•ng endpoint public, kh√¥ng c·∫ßn API key.
    """
    exchange = get_exchange(exchange_id)
    if not exchange:
        st.error(f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o s√†n {exchange_id}.")
        return []

    try:
        markets = exchange.load_markets()
        usdt_pairs = [symbol for symbol in markets if symbol.endswith('/USDT')]
        logging.info(f"ƒê√£ t·∫£i {len(usdt_pairs)} c·∫∑p USDT t·ª´ {exchange_id}.")
        return usdt_pairs
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y c·∫∑p USDT t·ª´ {exchange_id}: {e}")
        logging.error(f"Failed to fetch USDT pairs from {exchange_id}: {e}", exc_info=True)
        return []

def check_exchange_connectivity(exchange_id, public_endpoint=None):
    """Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn m·ªôt s√†n giao d·ªãch b·∫±ng m·ªôt public endpoint ƒë∆°n gi·∫£n."""
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    try:
        if exchange_id == 'binance':
            url = public_endpoint or "https://data.binance.com/api/v3/exchangeInfo" # Endpoint public ƒë·ªÉ l·∫•y th√¥ng tin s√†n
        elif exchange_id == 'huobi':
            url = public_endpoint or "https://api.huobi.pro/v1/common/symbols" # M·ªôt public endpoint kh√°c kh√¥ng c·∫ßn x√°c th·ª±c
        elif exchange_id == 'okx':
            url = public_endpoint or "https://www.okx.com/api/v5/public/instruments?instType=SPOT"
        elif exchange_id == 'gate':
            url = public_endpoint or "https://api.gateio.ws/api/v4/spot/currencies"
        elif exchange_id == 'mexc':
            url = public_endpoint or "https://api.mexc.com/api/v3/exchangeInfo"
        elif exchange_id == 'bybit':
            url = public_endpoint or "https://api.bybit.com/v5/market/time" # Endpoint public ƒë·ªÉ l·∫•y th·ªùi gian m√°y ch·ªß
        else:
            return f"Kh√¥ng c√≥ public endpoint m·∫∑c ƒë·ªãnh cho s√†n {exchange_id}", "warning"

        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 200:
            return f"K·∫øt n·ªëi ƒë·∫øn {exchange_id} th√†nh c√¥ng!", "success"
        else:
            return f"K·∫øt n·ªëi ƒë·∫øn {exchange_id} th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}", "error"
    except requests.exceptions.Timeout:
        return f"K·∫øt n·ªëi ƒë·∫øn {exchange_id} b·ªã H·∫æT TH·ªúI GIAN (Timeout).", "error"
    except requests.exceptions.ConnectionError:
        return f"L·ªói k·∫øt n·ªëi ƒë·∫øn {exchange_id}. Ki·ªÉm tra m·∫°ng ho·∫∑c ƒë·ªãa ch·ªâ URL.", "error"
    except Exception as e:
        return f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi k·∫øt n·ªëi ƒë·∫øn {exchange_id}: {e}", "error"


# --- Giao di·ªán ng∆∞·ªùi d√πng ---
st.markdown("<h1 class='main-header'>Giao D·ªãch USDT</h1>", unsafe_allow_html=True)

# Sidebar
st.sidebar.header("B·ªô L·ªçc & C·∫•u H√¨nh")

# Ki·ªÉm tra k·∫øt n·ªëi s√†n ban ƒë·∫ßu
st.sidebar.subheader("Ki·ªÉm tra k·∫øt n·ªëi s√†n (Public Endpoints)")
EXCHANGES = ['binance', 'okx', 'huobi', 'gate', 'mexc', 'bybit']
connectivity_results = {}

for ex_id in EXCHANGES:
    message, status = check_exchange_connectivity(ex_id)
    connectivity_results[ex_id] = status
    if status == "success":
        st.sidebar.success(message)
    elif status == "warning":
        st.sidebar.warning(message)
    else:
        st.sidebar.error(message)
    time.sleep(2) # TƒÉng ƒë·ªô tr·ªÖ l√™n 2 gi√¢y gi·ªØa c√°c l·∫ßn ki·ªÉm tra ƒë·ªÉ tr√°nh gi·ªõi h·∫°n t·ª∑ l·ªá

# Hi·ªÉn th·ªã th√¥ng b√°o t·ªïng quan
connected_exchanges = [ex for ex, status in connectivity_results.items() if status == "success"]
if connected_exchanges:
    st.sidebar.info(f"ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi: {', '.join(connected_exchanges)}")
else:
    st.sidebar.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn b·∫•t k·ª≥ s√†n giao d·ªãch n√†o.")

# C√°c t√πy ch·ªçn l·ªçc placeholder
st.sidebar.number_input("Gi·ªõi h·∫°n k·∫øt qu·∫£:", min_value=0, value=20, key="limit_results")
st.sidebar.multiselect("S√†n giao d·ªãch:", options=EXCHANGES, default=EXCHANGES, key="selected_exchanges")
st.sidebar.checkbox("Lo·∫°i tr·ª´ token ƒë√≤n b·∫©y/h·ª£p ƒë·ªìng t∆∞∆°ng lai", value=True, key="exclude_leveraged_futures")

with st.sidebar.expander("T√πy ch·ªânh Doji & Volume"):
    st.slider("S·ªë l∆∞·ª£ng n·∫øn g·∫ßn nh·∫•t ƒë·ªÉ ki·ªÉm tra Doji:", 1, 10, 3, key="doji_lookback")
    st.selectbox("Khung th·ªùi gian n·∫øn Doji:", ["1m", "5m", "15m", "1h", "4h", "1d"], key="doji_timeframe")
    st.selectbox("Ph∆∞∆°ng ph√°p t√≠nh t·ª∑ l·ªá th√¢n n·∫øn Doji:", ["Theo bi√™n ƒë·ªô n·∫øn", "Theo gi√° m·ªü"], key="doji_body_method")
    st.slider("T·ª∑ l·ªá ph·∫ßn trƒÉm th√¢n n·∫øn t·ªëi ƒëa ƒë·ªÉ ƒë∆∞·ª£c coi l√† Doji (%):", 0.0, 10.0, 5.0, key="doji_max_body_percent")
    st.slider("S·ªë l∆∞·ª£ng n·∫øn ƒë·ªÉ t√≠nh kh·ªëi l∆∞·ª£ng trung b√¨nh:", 5, 50, 20, key="volume_lookback")

# N√∫t t√¨m ki·∫øm
if st.sidebar.button("T√¨m ki·∫øm c·∫∑p USDT ph√π h·ª£p"):
    st.write("ƒêang t√¨m ki·∫øm...")
    # Logic t√¨m ki·∫øm s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë√¢y
    st.info("Ch·ª©c nƒÉng t√¨m ki·∫øm s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai chi ti·∫øt sau.")

# Khu v·ª±c hi·ªÉn th·ªã k·∫øt qu·∫£ ch√≠nh
st.subheader("K·∫øt qu·∫£ l·ªçc c·∫∑p USDT")
st.write("C√°c c·∫∑p giao d·ªãch ph√π h·ª£p s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y sau khi t√¨m ki·∫øm.")

st.subheader("Chi ti·∫øt c·∫∑p & Bi·ªÉu ƒë·ªì")
st.write("Th√¥ng tin chi ti·∫øt v√† bi·ªÉu ƒë·ªì n·∫øn s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y khi m·ªôt c·∫∑p ƒë∆∞·ª£c ch·ªçn.")

# --- Qu·∫£n l√Ω tr·∫°ng th√°i (placeholder) ---
if 'filtering_status' not in st.session_state:
    st.session_state.filtering_status = "Ch∆∞a b·∫Øt ƒë·∫ßu"
if 'filtered_pairs_data' not in st.session_state:
    st.session_state.filtered_pairs_data = pd.DataFrame()
if 'selected_pair_info' not in st.session_state:
    st.session_state.selected_pair_info = None
